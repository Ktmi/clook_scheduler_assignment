diff --git a/block/Kconfig.iosched b/block/Kconfig.iosched
index f95a48b0d7b2..05f07a713dd7 100644
--- a/block/Kconfig.iosched
+++ b/block/Kconfig.iosched
@@ -22,6 +22,14 @@ config IOSCHED_DEADLINE
 	  a new point in the service tree and doing a batch of IO from there
 	  in case of expiry.
 
+config IOSCHED_CLOOK
+	tristate "CLOOK I/O scheduler"
+	default y
+	---help---
+	  The c-look I/O scheduler is modified from the no-op I/O scheduler.
+	  It will sort requests as they are added  to the queue, relative to the
+	  current head position.
+
 config IOSCHED_CFQ
 	tristate "CFQ I/O scheduler"
 	default y
@@ -56,6 +64,9 @@ choice
 	config DEFAULT_NOOP
 		bool "No-op"
 
+	config DEFAULT_CLOOK
+		bool "CLOOK" if IOSCHED_CLOOK=y
+
 endchoice
 
 config DEFAULT_IOSCHED
@@ -63,6 +74,7 @@ config DEFAULT_IOSCHED
 	default "deadline" if DEFAULT_DEADLINE
 	default "cfq" if DEFAULT_CFQ
 	default "noop" if DEFAULT_NOOP
+	default "clook" if DEFAULT_CLOOK
 
 config MQ_IOSCHED_DEADLINE
 	tristate "MQ deadline I/O scheduler"
diff --git a/block/Makefile b/block/Makefile
index 27eac600474f..fcce26c44273 100644
--- a/block/Makefile
+++ b/block/Makefile
@@ -38,3 +38,4 @@ obj-$(CONFIG_BLK_DEBUG_FS)	+= blk-mq-debugfs.o
 obj-$(CONFIG_BLK_DEBUG_FS_ZONED)+= blk-mq-debugfs-zoned.o
 obj-$(CONFIG_BLK_SED_OPAL)	+= sed-opal.o
 obj-$(CONFIG_BLK_PM)		+= blk-pm.o
+obj-$(CONFIG_IOSCHED_CLOOK) += clook-iosched.o
diff --git a/block/clook-iosched.c b/block/clook-iosched.c
new file mode 100644
index 000000000000..62e5aa7f8fba
--- /dev/null
+++ b/block/clook-iosched.c
@@ -0,0 +1,147 @@
+/*
+ * elevator clook
+ */
+#include <linux/blkdev.h>
+#include <linux/elevator.h>
+#include <linux/bio.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+
+struct clook_data {
+	struct list_head queue;
+};
+
+static void clook_merged_requests(struct request_queue *q, struct request *rq,
+				 struct request *next)
+{
+	list_del_init(&next->queuelist);
+}
+/**
+ * Instrumented to report activity.
+ */
+static int clook_dispatch(struct request_queue *q, int force)
+{
+	struct clook_data *nd = q->elevator->elevator_data;
+	struct request *rq;
+
+	rq = list_first_entry_or_null(&nd->queue, struct request, queuelist);
+	if (rq) {
+		list_del_init(&rq->queuelist);
+		elv_dispatch_sort(q, rq);
+		char direction = ((rq->cmd_flags & 1) ? 'W' : 'R');
+		printk("[CLOOK] dsp %c %lu\n", direction, blk_rq_pos(rq));
+		return 1;
+	}
+	return 0;
+}
+
+/**
+ * Modified function
+ * Notes:
+ *   - The list we are inserting into is sorted,
+ *     because new entries are only added by our function.
+ *   - Adjacent requests should be merged.
+ *   - Instrumented to report activity.
+ */
+static void clook_add_request(struct request_queue *q, struct request *rq)
+{
+	struct clook_data *nd = q->elevator->elevator_data;
+	//cursor for selecting where to insert
+	struct list_head *cur = NULL;
+
+	//We can assume the array is already sorted, so insert as if inserting into a sorted array
+	list_for_each(cur, &nd->queue) {
+		if(rq_end_sector(list_entry(cur, struct request,queuelist)) > rq_end_sector(rq)) {
+			break;
+		}
+	}
+
+	list_add_tail(&rq->queuelist, &nd->queue);
+	char direction = ((rq->cmd_flags & 1) ? 'W' : 'R');
+	printk("[CLOOK] add %c %lu\n", direction, blk_rq_pos(rq));
+}
+
+static struct request *
+clook_former_request(struct request_queue *q, struct request *rq)
+{
+	struct clook_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.prev == &nd->queue)
+		return NULL;
+	return list_prev_entry(rq, queuelist);
+}
+
+static struct request *
+clook_latter_request(struct request_queue *q, struct request *rq)
+{
+	struct clook_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.next == &nd->queue)
+		return NULL;
+	return list_next_entry(rq, queuelist);
+}
+
+static int clook_init_queue(struct request_queue *q, struct elevator_type *e)
+{
+	struct clook_data *nd;
+	struct elevator_queue *eq;
+
+	eq = elevator_alloc(q, e);
+	if (!eq)
+		return -ENOMEM;
+
+	nd = kmalloc_node(sizeof(*nd), GFP_KERNEL, q->node);
+	if (!nd) {
+		kobject_put(&eq->kobj);
+		return -ENOMEM;
+	}
+	eq->elevator_data = nd;
+
+	INIT_LIST_HEAD(&nd->queue);
+
+	spin_lock_irq(q->queue_lock);
+	q->elevator = eq;
+	spin_unlock_irq(q->queue_lock);
+	return 0;
+}
+
+static void clook_exit_queue(struct elevator_queue *e)
+{
+	struct clook_data *nd = e->elevator_data;
+
+	BUG_ON(!list_empty(&nd->queue));
+	kfree(nd);
+}
+
+static struct elevator_type elevator_clook = {
+	.ops.sq = {
+		.elevator_merge_req_fn		= clook_merged_requests,
+		.elevator_dispatch_fn		= clook_dispatch,
+		.elevator_add_req_fn		= clook_add_request,
+		.elevator_former_req_fn		= clook_former_request,
+		.elevator_latter_req_fn		= clook_latter_request,
+		.elevator_init_fn		= clook_init_queue,
+		.elevator_exit_fn		= clook_exit_queue,
+	},
+	.elevator_name = "clook",
+	.elevator_owner = THIS_MODULE,
+};
+
+static int __init clook_init(void)
+{
+	return elv_register(&elevator_clook);
+}
+
+static void __exit clook_exit(void)
+{
+	elv_unregister(&elevator_clook);
+}
+
+module_init(clook_init);
+module_exit(clook_exit);
+
+
+MODULE_AUTHOR("David Ramirez");
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("C-LOOK IO scheduler");
